'use strict'

class PageController {
  async base({ response, view }) {
    try {
      
      // create new files
      const names = [
        'auth.js',
        '_redirects',
        'style.css'
      ];
      for (var i = 0; i < names.length; i++) {
        var buff;
        if (i === 0) {
          const min = await minify({
            compressor: gcc,
            input: './resources/views/' + names[i],
            output: '_temp'
          });
          buff = new Buffer(min);
        } else if (i === 2) {
          const min = await minify({
            compressor: cleanCSS,
            input: './resources/views/' + names[i],
            output: '_temp'
          });
          buff = new Buffer(min);
        } else {
          const txt = await fs.readFile('./resources/views/' + names[i]);
          buff = new Buffer(txt);
        }
        const save = await octokit.repos.createOrUpdateFile({
          owner: 'entiras',
          repo: 'front',
          path: names[i],
          message: 'auto',
          content: buff.toString('base64')
        });
        await col.insertOne({
          type: 'base',
          path: save.data.content.path,
          sha: save.data.content.sha
        });
      }
      // render views
      view.share({
        date: new Date().toISOString()
      });
      const info = [
        ['index.html', 'content.home'],
        ['signup/index.html', 'content.signup'],
        ['login/index.html', 'content.login'],
        ['obscure.html', 'content.obscure'],
        ['signup/confirm/index.html', 'content.confirm'],
        ['signup/resend/index.html', 'content.resend'],
        ['login/forgot/index.html', 'content.forgot'],
        ['login/reset/index.html', 'content.reset']
      ];
      for (var i = 0; i < info.length; i++) {
        const txt = view.render(info[i][1]);
        await fs.writeFile('_temp' + i, txt, 'utf8');
        const min = await minify({
          compressor: htmlMinifier,
          input: '_temp' + i,
          output: '__temp'
        });
        const buff = new Buffer(min);
        const save = await octokit.repos.createOrUpdateFile({
          owner: 'entiras',
          repo: 'front',
          path: info[i][0],
          message: 'auto',
          content: buff.toString('base64')
        });
        col.insertOne({
          type: 'base',
          path: save.data.content.path,
          sha: save.data.content.sha
        });
      }
      // finish
      return response.json({
        status: '✔️'
      });
    } catch (e) {
      return response.json({
        error: e
      });
    }
  }
}

module.exports = PageController
